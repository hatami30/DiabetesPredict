# -*- coding: utf-8 -*-
"""Diabetes_Predict_UTG.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hxaiIuXW-veaaTaQgJhH_9XawGB2jore
"""

import pandas as pd

# Memuat dataset
df = pd.read_csv('diabetes_prediction_dataset.csv')

# Melihat beberapa baris pertama dari dataset
df.head(10)

# Melihat informasi dataset
df.info()

# Meng-copy dataset
# df_copy = df.copy(deep=True)
# Mengganti nilai 0 dengan NaN
# df_copy[['blood_glucose_level', 'bmi', 'HbA1c_level']] = df_copy[['blood_glucose_level', 'bmi', 'HbA1c_level']].replace(0, np.NaN)

# Mengganti nilai NaN dengan mean atau median
# df_copy['blood_glucose_level'].fillna(df_copy['blood_glucose_level'].mean(), inplace=True)
# df_copy['bmi'].fillna(df_copy['bmi'].median(), inplace=True)
# df_copy['HbA1c_level'].fillna(df_copy['HbA1c_level'].median(), inplace=True)

# Pra-pemrosesan data
df['gender'] = df['gender'].replace({'Female': 0, 'Male': 1, 'Other': 2})
df['smoking_history'] = df['smoking_history'].replace({'No Info': 0, 'never': 1, 'former': 2, 'current': 3, 'not current': 4, 'ever': 5})

# Lakukan one-hot encoding pada fitur kategorikal
# X_encoded = pd.get_dummies(X, columns=['gender', 'smoking_history'])

# Normalisasi fitur numerik
# from sklearn.preprocessing import StandardScaler
# numeric_features = ['age', 'bmi', 'HbA1c_level', 'blood_glucose_level']
# scaler = StandardScaler()
# X_encoded[numeric_features] = scaler.fit_transform(X_encoded[numeric_features])

# Bagi data menjadi data latih dan data uji
from sklearn.model_selection import train_test_split
X = df.drop(columns='diabetes')
y = df['diabetes']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)

# Inisialisasi model Random Forest Classification
from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators=20)
classifier.fit(X_train, y_train)

# Lakukan prediksi pada data uji
y_pred = classifier.predict(X_test)

# Evaluasi performa model
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
# Menghitung akurasi
accuracy = accuracy_score(y_test, y_pred)
print("Akurasi:", accuracy)
# Menghitung presisi
precision = precision_score(y_test, y_pred)
print("Precision:", precision)
# Menghitung recall
recall = recall_score(y_test, y_pred)
print("Recall:", recall)
# Menghitung f1-score
f1 = f1_score(y_test, y_pred)
print("F1-score:", f1)

# Simpan model ke dalam file joblib
import joblib
joblib.dump(classifier, 'diabetes-predict-model.joblib')